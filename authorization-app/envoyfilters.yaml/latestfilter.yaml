apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: jwt-decode-filter
  namespace: your-namespace
spec:
  workloadSelector:
    labels:
      app: your-target-service  # Target only the specific service
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            local function decode_base64url(input)
              input = input:gsub("-", "+"):gsub("_", "/")
              local padding = #input % 4
              if padding == 2 then
                input = input .. "=="
              elseif padding == 3 then
                input = input .. "="
              end
              return (ngx.decode_base64(input))
            end

            function envoy_on_request(request_handle)
              -- Extract JWT from Authorization header
              local auth_header = request_handle:headers():get("Authorization")
              if not auth_header or not auth_header:find("Bearer ") then
                request_handle:respond({[":status"] = "403"}, "Missing or invalid Authorization header")
                return
              end

              local jwt_token = auth_header:sub(8)  -- Remove "Bearer " prefix

              -- Split JWT into header, payload, and signature
              local header_b64, payload_b64, _ = jwt_token:match("([^.]+)%.([^.]+)%.([^.]+)")
              if not header_b64 or not payload_b64 then
                request_handle:respond({[":status"] = "403"}, "Invalid JWT format")
                return
              end

              -- Decode the payload
              local payload_json = decode_base64url(payload_b64)
              if not payload_json then
                request_handle:respond({[":status"] = "403"}, "Failed to decode JWT payload")
                return
              end

              -- Parse JSON payload to extract client_id
              local payload = request_handle:json_decode(payload_json)
              local client_id = payload["client_id"]
              if client_id ~= "xxxxx" then
                -- If client_id does not match, skip id_token validation
                return
              end

              -- Proceed with id_token validation if client_id matches
              local id_token = request_handle:headers():get("id_token")
              if not id_token then
                request_handle:respond({[":status"] = "403"}, "id_token missing")
                return
              end

              -- Decode id_token (simplified; real verification requires a JWT library)
              local _, id_payload_b64, _ = id_token:match("([^.]+)%.([^.]+)%.([^.]+)")
              local id_payload_json = decode_base64url(id_payload_b64)
              local id_payload = request_handle:json_decode(id_payload_json)
              local groups = id_payload["groups"] or {}

              -- Check if any allowed group is present
              local allowed_groups = { "title1", "title2" }
              local allowed = false
              for _, group in ipairs(groups) do
                for _, allowed_group in ipairs(allowed_groups) do
                  if group == allowed_group then
                    allowed = true
                    break
                  end
                end
                if allowed then break end
              end

              if not allowed then
                request_handle:respond({[":status"] = "403"}, "Unauthorized group")
              end
            end
